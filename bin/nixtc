#!/usr/bin/env python3
# This file is placed in the Public Domain.
# pylint: disable=C,I,R,W0611,W0212,E0401
# ruff: noqa: E402


"prompt"


import os
import readline
import sys
import termios


sys.path.insert(0, os.getcwd())


from nixt.config  import Config, boot
from nixt.console import Console
from nixt.errors  import errors
from nixt.main    import cmnd, enable, init, scan
from nixt.parse   import parse
from nixt.utils   import forever, modnames


Cfg = Config()


if os.path.exists("mods"):
    import mods as MODS
else:
    MODS = None


def wrap(func):
    "reset console."
    old3 = None
    try:
        old3 = termios.tcgetattr(sys.stdin.fileno())
    except termios.error:
        pass
    try:
        func()
    except (KeyboardInterrupt, EOFError):
        pass
    finally:
        if old3:
            termios.tcsetattr(sys.stdin.fileno(), termios.TCSADRAIN, old3)


def main():
    "main"
    boot(Cfg)
    parse(Cfg, " ".join(sys.argv[1:]))
    print(Cfg)
    Cfg.dis = Cfg.sets.dis
    enable(print)
    from nixt.modules import all as modules
    mods = modnames(modules, MODS)
    Cfg.mod = ",".join(mods)
    if Cfg.dis:
        Cfg.mod = ",".join(set(modules) - set(spl(Cfg.dis)))
    scan(Cfg.mod, modules, MODS)
    if Cfg.txt:
        return cmnd(Cfg.otxt, print)
    csl = Console(print, input)
    if "i" in Cfg.opts:
        init(Cfg.mod, modules, MODS)
    csl.start()
    forever()


if __name__ == "__main__":
    wrap(main)
    errors()
    os._exit(0)
